#!/usr/bin/env python3

import pulsectl
import sys

from enum import Enum

pulse = pulsectl.Pulse(__file__)

MAX_VOLUME = 100


class Action(Enum):
    GET_VOLUME = "get"
    LOWER_VOLUME = "down"
    RAISE_VOLUME = "up"
    TOGGLE_MUTE = "mute"


def get_default_sink():
    default_sink_name = pulse.server_info().default_sink_name
    sinks = pulse.sink_list()
    matches = [sink for sink in sinks if sink.name == default_sink_name]
    return matches[0] if matches else None


def get_percent_volume(sink):
    return round(sink.volume.value_flat * MAX_VOLUME) if not sink.mute else 0


def increment_percent_volume(sink, increment):
    old_value = sink.volume.value_flat
    new_value = max(min(old_value * MAX_VOLUME + increment, MAX_VOLUME), 0)
    new_volume_info = pulsectl.PulseVolumeInfo(
        new_value / MAX_VOLUME, len(sink.volume.values)
    )
    pulse.volume_set(sink, new_volume_info)


def toggle_mute(sink):
    is_muted = not bool(sink.mute)
    pulse.mute(sink, mute=is_muted)
    return is_muted


def print_usage():
    print(
        "Usage: {} [{}] [increment]".format(
            sys.argv[0], "|".join(action.value for action in Action)
        )
    )


def main():
    try:
        action = Action(sys.argv[1])
    except (IndexError, ValueError):
        print_usage()
        sys.exit(1)

    try:
        increment = int(sys.argv[2])
    except (IndexError, ValueError):
        increment = 1

    default_sink = get_default_sink()

    if action == Action.GET_VOLUME:
        pass
    elif action == Action.LOWER_VOLUME:
        increment_percent_volume(default_sink, -increment)
    elif action == Action.RAISE_VOLUME:
        increment_percent_volume(default_sink, increment)
    elif action == Action.TOGGLE_MUTE:
        toggle_mute(default_sink)

    print(get_percent_volume(default_sink))


if __name__ == "__main__":
    main()
